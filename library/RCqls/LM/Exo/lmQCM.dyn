[#require]RCqls/QCM/Base
RCqls/LM/Exo/lm
[#main][#<]

## This method can be improved by not repeating twice successively the same actions

{#meth]qcmPrelim.ExoLM[#,]what[]
[#<]
{#case]#{what}
[#when]corr
[#R<][
  tmp <-abs(cor(#{.df})[#{.qcm.corr.yIndex},-#{.qcm.corr.yIndex}])
  tmp <- tmp[tmp > #{.qcm.corr.seuil}]
  vars.tmp <- names(tmp)[order(tmp,decreasing=TRUE)]
  {#if]#{.log}[#>] vars.tmp <- paste0("log(",vars.tmp,")")[#if}
]
[#rb<]
tmp=#R{=vars.tmp}.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#when]corr-positive-bad
[#R<][
  tmp <-cor(#{.df})[#{.qcm.corr.yIndex},-#{.qcm.corr.yIndex}]
  tmp <- tmp[tmp > #{.qcm.corr.seuil}]
  vars.tmp <- names(tmp)[order(tmp,decreasing=TRUE)]
  {#if]#{.log}[#>] vars.tmp <- paste0("log(",vars.tmp,")")[#if}
]
[#rb<]
tmp=#R{=vars.tmp}.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#when]corr-increasing-bad
[#R<][
  tmp <-abs(cor(#{.df})[#{.qcm.corr.yIndex},-#{.qcm.corr.yIndex}])
  tmp <- tmp[tmp > #{.qcm.corr.seuil}]
  vars.tmp <- names(tmp)[order(tmp)]
  {#if]#{.log}[#>] vars.tmp <- paste0("log(",vars.tmp,")")[#if}
]
[#rb<]
tmp=#R{=vars.tmp}.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#when]summary
[#R<][tmpCoeff<- #{.objR}$summary$coeff[,4][-1]]
[#rb<]
tmp="names(sort(tmpCoeff[tmpCoeff<#{.qcm.summary.seuil}]))".to_R.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#=].qcm.summary.goodVars[:{tmp}]
[#when]summary-bad-vars
[#rb<]
tmp="names(sort(tmpCoeff[tmpCoeff>#{.qcm.summary.seuil}]))".to_R.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#=].qcm.summary.badVars[:{tmp}]
[#when]vif[#rb<]
tmp="rev(names(sort(#{.objR}$vif[#{.objR}$vif>#{.qcm.vif.seuil}])))".to_R
tmp=[tmp] unless tmp.is_a? Array
tmp.map!{|nm| '\texttt{'+nm+'}'} if tmp
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp and tmp.length > 1
[#when]vifCorr[#r<]round(cor(#{.df})["#{.qcm.vifCorr.v1}","#{.qcm.vifCorr.v2}"],9) -> tmpVifCorr
[#?]#{.log}[#=].qcm.vifCorr.transf[<<v1[log(#{.qcm.vifCorr.v1})]<<v2[log(#{.qcm.vifCorr.v2})]][#?]else[#=].qcm.vifCorr.transf[<<v1[#{.qcm.vifCorr.v1}]<<v2[#{.qcm.vifCorr.v2}]]
[#when]deltaH0Asymp[#r<]
(#R{round(#{.objR}$summary$coef[#{.qcm.deltaH0Asymp.indVar}+1,1],#{.qcm.deltaH0Asymp.round})}-(#{.qcm.deltaH0Asymp.betaRef}))/#R{round(#{.objR}$summary$coef[#{.qcm.deltaH0Asymp.indVar}+1,2],#{.qcm.deltaH0Asymp.round})}->tmp.deltaH0Asymp
tmpLim.deltaH0Asymp<-qnorm(#{.qcm.deltaH0Asymp.alphaR})
[#when]pvalAsymp[#r<](#R{#{.objR}$summary$coef[#{.qcm.pvalAsymp.indVar}+1,1]}-(#{.qcm.pvalAsymp.betaRef}))/#R{#{.objR}$summary$coef[#{.qcm.pvalAsymp.indVar}+1,2]}->tmp
pnorm(tmp)->tmpPValG
[#when]colinCorr[#R<]
  tmp <-abs(cor(#{.df})[-#{.qcm.corr.yIndex},-#{.qcm.corr.yIndex}])
  index.tmp<-order(tmp,decreasing=TRUE)
  vars.tmp <- names(#{.df})[-#{.qcm.corr.yIndex}]
  vars.tmpGood1 <- vars.tmp[c(((index.tmp[[1+nrow(tmp)]]-1) %% nrow(tmp))+1,((index.tmp[[1+nrow(tmp)]]-1) %/% nrow(tmp))+1)]
  vars.tmpGood2 <- vars.tmp[((index.tmp[[1+nrow(tmp)]]-1) %/% nrow(tmp))+1]
  vars.tmpBad <- vars.tmp[c(((index.tmp[[length(index.tmp)]]-1) %% nrow(tmp))+1,((index.tmp[[length(index.tmp)]]-1) %/% nrow(tmp))+1)]
  {#if]#{.log}[#R<] 
  vars.tmpGood1 <- paste0("log(",vars.tmpGood1,")")
  vars.tmpGood2 <- paste0("log(",vars.tmpGood2,")")
  vars.tmpBad <- paste0("log(",vars.tmpBad,")")
  [#if}
[#when]colinCorr-good1[#rb<]
tmp=#R{=vars.tmpGood1}.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#=].qcm.colinCorr[:{tmp}]
[#when]colinCorr-good2[#rb<]
tmp=#R{=vars.tmpGood2}.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#=].qcm.colinCorr[:{tmp}]
[#when]colinCorr-bad[#rb<]
tmp=#R{=vars.tmpBad}.map{|nm| '\texttt{'+nm+'}'}
tmp=tmp[0...-1].join(", ")+" et "+tmp[-1] if tmp.length > 1
[#=].qcm.colinCorr[:{tmp}]
[#case}
[#meth}


{#meth]qcmSrv.ExoLM[#,]what[][#,]seuil[]
[#rb<]##p #{=what}
[#=]result
[{#case]#{what}
  [#%]corr
  [#when]corr-varsGood[#<]{#qcmPrelim]self[#what]corr[#} [#>] [{les variables les plus explicatives semblent être dans l'ordre :{tmp}}*]
  [#when]corr-varsPositiveBad[#<]{#qcmPrelim]self[#what]corr-positive-bad[#}[#>] [{les variables les plus explicatives semblent être dans l'ordre :{tmp}}]
  [#when]corr-varsIncreasingBad{#qcmPrelim]self[#what]corr-increasing-bad[#}[#>] [{les variables les plus explicatives semblent être dans l'ordre :{tmp}}]

  [#%]summary
  [#when]summary-prelim[#<]{#qcmPrelim]self[#what]summary[#}
  [#when]summary-pvalGood[#>][{seuls les tests de signficativité locale #{.qcm.summary.goodVars} sont significatifs au seuil de #r{#{.qcm.summary.seuil}*100}\%}*]
  [#when]summary-R2Good[#>][{$R^2 \simeq #r{#{.objR}$summary$r.sq*100}\%$}*]
  [#when]summary-defR2Good[#>][{$R^2$ représente la part de variance expliquée par le modèle}*]
  [#when]summary-R2BadSigma[#>][{$R^2$ représente la part d'écart-type expliquée par le modèle}]

  [#when]summary-pvalBad[#<]{#qcmPrelim]self[#what]summary-bad-vars[#}[#>][{seuls les tests de signficativité locale #{.qcm.summary.badVars} sont significatifs au seuil de #r{#{.qcm.summary.seuil}*100}\%}]

  [#%]colinCorr
  [#when]colinCorr-prelim[#<]{#qcmPrelim]self[#what]colinCorr[#}
  [#when]colinCorr-Good1[#<]{#qcmPrelim]self[#what]colinCorr-good1[#}[#>][{La corrélation entre #{.qcm.colinCorr} présage du plus fort phénomène de colinéarité}*]
  [#when]colinCorr-Good2[#<]{#qcmPrelim]self[#what]colinCorr-good2[#}[#>][{#{.qcm.colinCorr} est affecté par le phénomène de colinéarité}*]
  [#when]colinCorr-Bad1[#<]{#qcmPrelim]self[#what]colinCorr-bad[#}[#>][{La corrélation entre #{.qcm.colinCorr} présage du plus fort phénomène de colinéarité}]

  [#%]colin
  [#when]colin-stderrGood[#>][{la colinéarité entre variables explicatives entraîne une augmentation des erreurs standard des paramètres associés}*]
  [#when]colin-stattestGood[#>][{la colinéarité entre variables explicatives entraîne une diminution en valeur absolue des statistiques de test de significativité locale associées}*]
  [#when]colin-pvalGood[#>][{la colinéarité entre variables explicatives entraîne une augmentation de la p$-$valeur des tests de significativité locale associés}*]
  [#when]colin-stderrBad[#>][{la colinéarité entre variables explicatives entraîne une diminution des erreurs standard des paramètres associés}]
  [#when]colin-stattestBad[#>][{la colinéarité entre variables explicatives entraîne une augmentation en valeur absolue des statistiques de test de significativité locale associées}]
  [#when]colin-pvalBad[#>][{la colinéarité entre variables explicatives entraîne une diminution de la p$-$valeur des tests de significativité locale associés}]

  [#%]vif
  [#when]vif-R2jGood[#>] [{$R_j^2$ est le $R^2$ associé au modèle expliquant $\Vect{x}^{(j)}$ en fonction des $\Vect{x}^{(k)}$ avec $k\neq j$}*]
  [#when]vif-defGood[#>] [{$VIF_j = \frac{1}{1-R_j^2}$}*]
  [#when]vif-R2jVIFGood[#>] [{$R_j^2 = 1-\frac{1}{VIF_j}$}*]
  [#when]vif-interpGood[#<]{#qcmPrelim]self[#what]vif[#}
  [#>][{]
  [#?]tmp and tmp.length>1[#>][les VIFs de :{tmp} sont relativement importants, ici supérieurs à #{.qcm.vif.seuil}]
  [#?]tmp and tmp.length==1[#>][le VIF de :{tmp} est relativement important, ici supérieur à #{.qcm.vif.seuil}]
  [#?]!tmp[#>][aucun VIF n'est relativement important, ici supérieur à #{.qcm.vif.seuil}][#?]end
  [#>][}*]
  [#when]vif-colinGood[#>] [{un $VIF_j$ relativement important traduit que $\Vect{x}^{(j)}$ est atteint par un phénomène de colinéarité}*]
  [#when]vif-phraseGood[#>][{un VIF est un facteur multiplicatif supérieur au égal à 1}*]

  [#when]vif-R2jBad[#>] [{$R_j^2$ est le $R^2$ associé au modèle expliquant $\Vect{y}$ en fonction de tous les régresseurs sauf le $j^{\grave eme}$}]
  [#when]vif-defBad[#>] [{$VIF_j = 1-\frac{1}{R^2_j}$}]
  [#when]vif-R2jVIFBad[#>] [{$R^2_j = \frac{1}{1-VIF_j}$}]
  [#when]vif-phraseBad[#>][{un VIF est un facteur multiplicatif positif et pouvant s'annuler}]
  [#when]vif-interpBad[#>][{le VIF de \texttt{log(ind)} est mauvais car trop proche de 1}]

  [#%]vifCorr
  [#when]vifCorr-prelim[#<]{#qcmPrelim]self[#what]vifCorr[#}
  [#when]vifCorr-R2AugmenteGood[#>][{le $R^2$ augmente par ajout d'une variable explicative dans le modèle}*]
  [#when]vifCorr-R2jGood[#>][{le $R^2$ obtenu en régressant \texttt{#{.qcm.vifCorr.transf.v1}} sur tous les autres variables explicatives  est supérieur au $R^2$ du modèle expliquant \texttt{#{.qcm.vifCorr.transf.v1}} sur \texttt{#{.qcm.vifCorr.transf.v2}}  (de l'ordre de $#R{tmpVifCorr}^2$)}*]
  [#when]vifCorr-VIFjGood[#>][{$VIF_{#{.qcm.vifCorr.transf.v1}}$ et $VIF_{#{.qcm.vifCorr.transf.v2}}$  sont supérieurs à $#r{1/(1-tmpVifCorr^2)}$}*]

  [#when]vifCorr-R2jBad[#>][{le $R^2$ obtenu en régressant \texttt{#{.qcm.vifCorr.transf.v1}} sur tous les autres variables explicatives  est inférieur au $R^2$ du modèle expliquant \texttt{#{.qcm.vifCorr.transf.v1}} sur \texttt{#{.qcm.vifCorr.transf.v2}}  (de l'ordre de $#R{tmpVifCorr}^2$)}]
  [#when]vifCorr-R2jBadLog[#>][{le $R^2$ obtenu en régressant \texttt{#{.qcm.vifCorr.transf.v1}} sur tous les autres variables explicatives  est supérieur au $R^2$ du modèle expliquant \texttt{#{.qcm.vifCorr.transf.v1}} sur \texttt{#{.qcm.vifCorr.transf.v2}}  (de l'ordre de $#R{tmpVifCorr}^2$)}]
  [#when]vifCorr-VIFjBad[#>][{$VIF_{#{.qcm.vifCorr.transf.v1}}$ est nécessairement plus petit que  $VIF_{#{.qcm.vifCorr.transf.v2}}$}]

  [#%]desc
  [#when]desc-methGood[#>][{La stratégie adoptée est d'appliquer la règle d'or consistant à retirer à chaque étape une unique variable explicative.}*]
  [#when]desc-pvalGrandeGood[#>][{A chaque étape, on retire la variable ayant la plus grande p-valeur du test de significativité locale}*]
  [#when]desc-R2Good[#>][{à la dernière étape, le $R^2$ est correct}*]
  [#when]desc-pvalGood[#>][{à la dernière étape,  toutes les p-valeurs des tests de significativité locale sont petites}*]

  [#when]desc-VIFGrandBad[#>][[{A chaque étape, on retire la variable ayant le plus grand VIF}*]]
  [#when]desc-methBad[#>][{La stratégie adoptée est d'appliquer la règle d'or consistant à retirer à chaque étape toutes les variables explicatives avec grande p-valeur du test de significativité locale}]
  [#when]desc-pvalPetiteBad[#>][{A chaque étape, on retire la variable ayant la plus petite p-valeur du test de significativité locale}]
  [#when]desc-VIFPetitBad[#>][{A chaque étape, on retire la variable ayant le plus petit VIF}]
  [#when]desc-R2Bad[#>][{à la dernière étape, le $R^2$ est maximal}]
  [#when]desc-pvalBad[#>][{à la dernière étape,  toutes les p-valeurs des tests de significativité locale sont grandes}]


  [#%]increment
  [#when]increment-Good[#>][{}*]

  [#%]deltaH0Asymp
  [#when]deltaH0Asymp-prelim[#<]{#qcmPrelim]self[#what]deltaH0Asymp[#}
  [#when]deltaH0Asymp-valeurGood[#>][{la statistique de test vaut $#R{round(tmp.deltaH0Asymp,3)}$}*]
  [#when]deltaH0Asymp-quantileGood[#>][{la statistique de test est inférieure à $#R{round(tmpLim.deltaH0Asymp,3)}$}*]
  [#when]deltaH0Asymp-conclGood[#>][{on peut plutôt penser que $\beta_#{.qcm.deltaH0Asymp.indVar}#{.qcm.deltaH0Asymp.side}#{.qcm.deltaH0Asymp.betaRef}$}*]
  [#when]deltaH0Asymp-valeurBadMinus[#>][{la statistique de test vaut $#R{round(-tmp.deltaH0Asymp,3)}$}]
  [#when]deltaH0Asymp-quantileBad[#>][{la statistique de test est supérieure à $#R{round(tmpLim.deltaH0Asymp,3)}$}]
  [#when]deltaH0Asymp-conclBadSigne[#>][{on peut plutôt penser que $\beta_#{.qcm.deltaH0Asymp.indVar}>#{.qcm.deltaH0Asymp.betaRef}$}]


  [#%]pvalAsymp
  [#when]pvalAsymp-gauche[#>][{$\beta_#{.qcm.pvalAsymp.indVar}<#{.qcm.pvalAsymp.betaRef}$}{#if]#r{tmp.PValG<#{.qcm.pvalAsymp.alphaR}}[#>]*[#}]
  [#when]pvalAsymp-droite[#>][{$\beta_#{.qcm.pvalAsymp.indVar}>#{.qcm.pvalAsymp.betaRef}$}{#if]#r{1-tmp.PValG<#{.qcm.pvalAsymp.alphaR}}[#>]*[#}]
  [#when]pvalAsymp-bi[#>][{$\beta_#{.qcm.pvalAsymp.indVar}\neq #{.qcm.pvalAsymp.betaRef}$}{#if]#r{(2*min(tmp.PValG,1-tmp.PValG))<#{.qcm.pvalAsymp.alphaR}}[#>]*[#}]
  [#when]pvalAsymp-gaucheBadBeta2[#>][{$\beta_#{.qcm.pvalAsymp.indVarBad}<#{.qcm.pvalAsymp.betaRef}$}]
  [#when]pvalAsymp-droiteBadBeta2[#>][{$\beta_#{.qcm.pvalAsymp.indVarBad}>#{.qcm.pvalAsymp.betaRef}$}]
  [#when]pvalAsymp-biBadBeta2[#>][{$\beta_#{.qcm.pvalAsymp.indVarBad} \neq #{.qcm.pvalAsymp.betaRef}$}]
  [#when]pvalAsymp-gaucheBadRef[#>][{$\beta_#{.qcm.pvalAsymp.indVar}< #{.qcm.pvalAsymp.betaRefMinusBad}$}]
  [#when]pvalAsymp-droiteBadRef[#>][{$\beta_#{.qcm.pvalAsymp.indVar}> #{.qcm.pvalAsymp.betaRefMinusBad}$}]
  [#when]pvalAsymp-biBadRef[#>][{$\beta_#{.qcm.pvalAsymp.indVar}\neq #{.qcm.pvalAsymp.betaRefMinusBad}$}]

  [#%]icAsymp
  [#when]icAsymp-formuleRGood[#>][{la formule \texttt{R} d'obtention est \texttt{#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar}+1,1],#{.qcm.icAsymp.round})}+c(-1,1)*qnorm(#R{1-#{.qcm.icAsymp.alphaP}/200})*#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar}+1,2],#{.qcm.icAsymp.round})}}}*]
  [#when]icAsymp-valeurGood[#>][{l'intervalle de confiance à $#R{100-#{.qcm.icAsymp.alphaP}}\%$ est \texttt{[#R{round(#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar}+1,1],#{.qcm.icAsymp.round})}+c(-1,1)*qnorm(#R{1-#{.qcm.icAsymp.alphaP}/200})*#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar}+1,2],#{.qcm.icAsymp.round})},3)}}]}*]
  [#when]icAsymp-aepGood[#>][{l'intervalle de confiance obtenu est l'un parmi une infinité dont $#R{(1-#{.qcm.icAsymp.alphaP}/200)*100}\%$ approximativement contiendraient $\beta_#{.qcm.icAsymp.indVar}$}*]
  [#when]icAsymp-testGood[#>][{le test de significativité locale a une p-valeur inférieure à $#{.qcm.icAsymp.alphaP}\%$ si $0$ n'appartient pas à l'intervalle de confiance}*]
  [#when]icAsymp-formuleRBad[#>][{la formule \texttt{R} d'obtention est \texttt{#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar},1],#{.qcm.icAsymp.round})}+c(-1,1)*qnorm(#R{1-#{.qcm.icAsymp.alphaP}/100})*#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar},2],#{.qcm.icAsymp.round})}}}]
  [#when]icAsymp-valeurBad[#>][{l'intervalle de confiance à 95\% est \texttt{[#R{round(#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar},1],#{.qcm.icAsymp.round})}+c(-1,1)*qnorm(#R{1-#{.qcm.icAsymp.alphaP}/100})*#R{round(#{.objR}$summary$coef[#{.qcm.icAsymp.indVar},2],#{.qcm.icAsymp.round})},3)}}]}]
  [#when]icAsymp-aepBad[#>][{l'intervalle de confiance obtenu est l'un parmi une infinité dont $#{.qcm.icAsymp.alphaP}\%$ approximativement contiendraient $\beta_#{.qcm.icAsymp.indVar}$}]
  [#when]icAsymp-testBad[#>][{le test de significativité locale a une p-valeur inférieure à $#{.qcm.icAsymp.alphaP}\%$ si $\beta_#{.qcm.icAsymp.indVar}$ n'appartient pas à l'intervalle de confiance}]


  [#%]ipAsymp
  [#when]ipAsymp2-prelim[#R<]
  round(#{.objR}$summary$coef[,1],2)->tmp
  modelsTmp<-list(#{.qcm.ipAsymp2.model})
  predictTmp<-paste(sapply( modelsTmp,function(l) paste('predict(lm(',deparse(l),'),xTau,interval="prediction")')),collapse="\n")
  [#R<]xTau <- #{.qcm.ipAsymp2.newData}
  #R{predictTmp}->ip
  [#=].qcm.ipAsymp2.formR[#R{tmp[1]}{#if]#R{tmp[2]>=0}[#>]+[#if}#R{tmp[2]}*log(123456789){#if]#R{tmp[3]>=0}[#>]+[#if}#R{tmp[3]}*log(51){#if]#R{tmp[4]>=0}[#>]+[#if}#R{tmp[4]}*log(800000){#if]#R{tmp[5]>=0}[#>]+[#if}#R{tmp[5]}*log(10)]
  [#when]ipAsymp2-formuleRGood[#>][{la formule \texttt{R} d'obtention de la prévision ponctuelle est \\ \texttt{exp(#{.qcm.ipAsymp2.formR})}}*]
  [#when]ipAsymp2-valeurGood[#>][{la prévision ponctuelle vaut  approximativement par le calcul #R{round(exp(#{.qcm.ipAsymp2.formR}),3)}}*]
  [#when]ipAsymp2-formuleRBadLog[#>][{la formule \texttt{R} d'obtention de la prévision ponctuelle est \\ \texttt{#{.qcm.ipAsymp2.formR}}}]
  [#when]ipAsymp2-valeurBadLog[#>][{la prévision ponctuelle vaut approximativement par le calcul #R{round(#{.qcm.ipAsymp2.formR},3)}}]
  [#when]ipAsymp2-ipGood[#>][{l'intervalle de prévision à $#R{100-#{.qcm.ipAsymp2.alphaP}}\%$ est \texttt{[#R{round(exp(ip[-1]),3)}]}}*]
[#case}]
[#>][#{result}]
[#}
