[#require]
RCqls/StatInf/QCM
RCqls/StatInf/HypoTestHtml
[#main][#<]

############# HTML PART #################

{#def]qcmHypoTest[#,]title[][#,]choices[][#,]space[\quad][#,]size[]
[#rb<]choices=#{=choices}.strip
#p [:choices,choices]
res_table=[]
lignes=choices.split("\n").map{|e| e.strip}
#p [:lignes,lignes]
lignes.each do |ligne| #
  #p [:ligne,ligne]
  unless ["%","#"].include? ligne[0,1]
    res_ligne=[]
    elts=ligne.split(" | ").map{|e| e.strip}
    elts.each do |elt| #
      res_elt={}
      h1,*opts=elt.split("&").map{|e| e.strip}
      ##p [:opts,opts]
      res_elt[:h1],res_elt[:what]=h1.split("@").map{|e| e.strip}
      opts.each{|e| res_elt[$1.to_sym] = $2 if e.strip =~ /^(cadre|data|env|init|space|size)\=(.*)$/} unless opts.empty?
      res_ligne << res_elt
    end
    res_table << res_ligne
  end
end
#p [:res_table,res_table]
[#rb>]
QCM.new_question
#Dyndoc.warn :res_table,[res_table,res_table.length]
res_table.each_with_index do |res_ligne,li| #
  #Dyndoc.warn :res_ligne,[li,res_ligne]
  res_ligne.each_with_index do |res_elt,ll| #
    label=QCM.item_label
    h1,answer=(res_elt[:h1][-1,1]=="*" ? [res_elt[:h1][0...-1],:good] : [res_elt[:h1],:bad] )
    size=res_elt[:size] || ""
    size=#{=size} if size.empty? and #{+?size}
    QCM.add_question_item label, answer
    {#<]choice:{ll + 1}{#if]answer == :good[#>]*[#}: :{h1} :{res_elt[:what] || "AsIs"} :{res_elt[:cadre] || "a"} data(:{res_elt[:data] || ""}) initR(:{res_elt[:init] || ""}) :{res_elt[:env] ||"envHypoTestExo"} === [#}
    {#>]{#qcmSrvH1]:{h1}[#,]:{res_elt[:what] || "AsIs"}[#cadre]:{res_elt[:cadre] || "a"}[#data]:{res_elt[:data] || ""}[#initR]:{res_elt[:init] || ""}[#envR]:{res_elt[:env] ||"envHypoTestExo"}[#}{#if]size[#>]}[#}[#>}
  end
  {#>]\\[#>} if li != res_table.length-1
end
[#def}

{#def]qcmRedStd[#,]title[][#,]PP[][#,]H0[][#,]H1[][#,]StatTest[][#,]RD[][#,]Conclusion[]
[#=]title[:{#{=title}.strip}]
[#=]test.pp[]
[#rb>]content={pp: '#{PP}'.strip.split("\n"), h0: '#{H0}'.strip.split("\n"), h1: '#{H1}'.strip.split("\n"), st: '#{StatTest}'.strip.split("\n"), rd: '#{RD}'.strip.split("\n"), an: '#{Conclusion}'.strip.split("\n")}
#Dyndoc.warn :content, content
content.keys.each do |k| #
  txt=content[k]
  #Dyndoc.warn :txt, [k,txt]
  if !(txt.empty?)
  #Dyndoc.warn :txt2,[k,txt]
    opts={}
    first=txt[0].strip
    if first[0,1]=='(' and first[-1,1]==')'
      ## read the options
      first[1...-1].split('),(').each{|e| opts[$1.to_sym] = $2 if e.strip =~ /^(space|size)\=(.*)$/}
      ## update txt
      txt=txt[1..-1]
    end
    txt=txt.join("\n")
#p :txt,txt.inspect
    {#>][#=]test.:{k.to_s}[{#qcmHypoTest]#{title}/:{k.to_s}[#,]space[:{opts[:space] || '\quad'}][#,]size[:{opts[:size] || ''}][#choices]:{txt}[#qcmHypoTest}][#>]#{test.:{k.to_s}}[#>}
  end
end
[#>]
[{#if]#{+?test.pp}[#>]\noindent \underline{Partie Préliminaire~:}\\ #{test.pp}\\[#}|
{#if]#{+?test.h0}[#>]\noindent \underline{Hypothèses de test}~:\\
\noindent $\mathbf{H_0}$:\quad
#{test.h0}
[#if}
{#if]#{+?test.h1}[#>]\noindent $\mathbf{H_1}$:\quad
#{test.h1}
[#if}
{#if]#{+?test.st}[#>]\noindent\underline{Statistique de test sous $\mathbf{H_0}$}~:\\
#{test.st}
[#if}
{#if]#{+?test.rd}[#>]\noindent\underline{Règle de Décision}~: Accepter $\mathbf{H_1}$ si~:\\
#{test.rd}
[#if}
{#if]#{+?test.an}[#>]\noindent\underline{Conclusion}~: Au vu des données, \\
#{test.an}[#if}]
[#def}

