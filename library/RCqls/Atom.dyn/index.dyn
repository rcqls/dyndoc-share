{#def]atomClass[#,]class[][#,]extends[]
[#,]view[][#,]init[][#,]body[][#<]view -> contents, init -> initialize, body -> rest of methods (often empty)
[#rb<]code,tab="","  "
code << "class " + #{=class}.strip
code << "extends " + #{=extends}.strip unless #{=extends}.strip.empty?
code << "\n"
if #{+?view}
	code << tab << "@content: ->\n"
	content = #{=view}.split("\n",-1).map{|l| #
		l2=l.gsub(/@miniEditor\(([^\)]*)\)\s*\"(.*)\"\s*$/,'@subview "\1",new MiniEditorView(placeholderText: "\2")')
		l2.gsub!(/@dyndoc\(([^\)]*)\)/,'@subview "\1",new DyndocViewer(editorId: "\1") ')
		tab + l2.gsub(/(\@[^\(]*)(\()([^\)]*)(\))/,'\1 outlet: \3,')
	}
	code << content.join("\n") << "\n"
end
if #{+?init}
	code << tab << "initialize: ->\n"
	code << #{=init}.split("\n",-1).map{|l| tab+l}.join("\n") << "\n"
end
if #{+?body}
	code << #{=body}.split("\n",-1).map{|l| tab+l}.join("\n") << "\n"
end
code << tab << "getTitle: ->\n" << tab*2 << '"' << #{=class}.strip << '"' << "\n"
code << tab << "getIconName: ->\n" << tab*2 << '"' << #{=class}.strip << '"' << "\n"
code << tab << "getUri: ->\n" << tab*2 << '"dyndoc-atom://' << #{=class}.strip << '"' << "\n"
[#rb>]code
[#def}