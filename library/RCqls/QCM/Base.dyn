[#package]\usepackage{framed}
[#main]
[#rb<]

module QCM
  @@qcm={}
  @@qcmBareme={}
  @@question=[]
  @@cpt_item=-1
  @@prj,@@title,@@key=nil,nil,nil

  def QCM.qcm
    @@qcm
  end

  def QCM.bareme
    @@qcmBareme
  end

  def QCM.new_question
    @@question=[]
    @@cpt_item=-1
  end

  def QCM.item_label
    @@cpt_item += 1
    (("A".ord)+@@cpt_item).chr
  end

  def QCM.add_question_item(label,answer)
    @@question << {label: label, answer: answer}
  end

  def QCM.add_question_element(elt)
    @@question << elt
  end

  def QCM.set_question(title)
    @@prj,@@title,@@key=title.split("/")
  end

  def QCM.set_questions(title)
    @@prj,@@title=title.split("/")
  end

  def QCM.save_question(title=nil)
    QCM.set_question title if title
    @@qcm[@@prj]={} unless @@qcm[@@prj]
    @@qcm[@@prj][@@title]={} unless @@qcm[@@prj][@@title]
    @@qcm[@@prj][@@title][@@key] = @@question
    dir=File.expand_path File.join("~",".qcmAMC")
    unless File.directory? dir
      require 'fileutils'
      FileUtils.mkdir_p dir
    end
    File.open(File.join(dir,@@prj+".qcm"),"w") {|f| f << @@qcm[@@prj].inspect}
  end

  def QCM.read_project
    unless @@qcm[@@prj]
      qcmAMC=File.expand_path File.join("~",".qcmAMC",@@prj+".qcm")
      #p [qcmAMC,(File.exists? qcmAMC)]
      if File.exist? qcmAMC
        @@qcm[@@prj]=eval(File.read(qcmAMC))
        ##p [:qcm,$qcm[prj]]
      end
    end
  end

  def QCM.question_title
    "#{@@prj}/#{@@title}/#{@@key}"
  end

  def QCM.question
    ( @@qcm[@@prj] and @@qcm[@@prj][@@title] ) ? @@qcm[@@prj][@@title][@@key] : nil
  end

  def QCM.questions
    ( @@qcm[@@prj] and @@qcm[@@prj][@@title] ) ? @@qcm[@@prj][@@title] : nil
  end

  def QCM.question_bareme
    ( @@qcmBareme[@@prj] and @@qcmBareme[@@prj][@@title] and @@qcmBareme[@@prj][@@title][@@key] ) ? @@qcmBareme[@@prj][@@title][@@key] : nil
  end

  def QCM.set_question_bareme(prj,title,key,bareme)
    @@qcmBareme[prj]={} unless @@qcmBareme[prj]
    @@qcmBareme[prj][title]={} unless @@qcmBareme[prj][title]
    @@qcmBareme[prj][title][key] = bareme
  end
end

[#<]

##### qcmChoices and qcmChoicesList

{#def]qcmChoices[#,]title[][#,]choices[][#,]space[\quad][#,]size[]
[#rb<]choices=#{=choices}.strip
#p [:choices,choices]
res_table=[]
lignes=choices.split("\n").map{|e| e.strip}
#p [:lignes,lignes]
lignes.each do |ligne| #
  #p [:ligne,ligne]
  unless ["%","#"].include? ligne[0,1]
    res_ligne=[]
    if ligne[0,2]=='<<'
      lab,*rest=ligne[2..-1].split(">>")
      ligne=rest.join(">>").strip
      res_ligne << lab #not a Hash
    end
    unless ligne.empty?
      elts=ligne.split(" | ").map{|e| e.strip}
      elts.each do |elt| #
        res_elt={}
        res_elt[:txt],*opts=elt.split("&").map{|e| e.strip}
        opts.each{|e| res_elt[$1.to_sym] = $2 if e.strip =~ /^(space|size)\=(.*)$/} unless opts.empty?
        res_ligne << res_elt
      end
    end
    res_table << res_ligne
  end
end
#p [:res_table,res_table]
[#rb>]
QCM.new_question
#Dyndoc.warn :res_table,[res_table,res_table.length]
res_table.each_with_index do |res_ligne,li| #
  {#>]\noindent [#>}
  #Dyndoc.warn :res_ligne,[li,res_ligne]
  res_ligne.each do |res_elt| #
    if res_elt.is_a? String
      {#>]:{res_elt}[#>}
      QCM.add_question_element res_elt
    else
      label=QCM.item_label
      txt,answer=(res_elt[:txt][-1,1]=="*" ? [res_elt[:txt][0...-1],:good] : [res_elt[:txt],:bad] )
      size=res_elt[:size] || ""
      size=#{=size} if size.empty? and #{+?size}
      QCM.add_question_item label,answer
      {#>]\fbox{:{label}}~ {#if]size[#>]{:{size} [#} :{txt} {#if]size[#>]}[#} :{res_elt[:space] || '#{space}'}[#>}
    end
  end
  {#>]\\[#>} if li != res_table.length-1 and !(res_ligne.length==1 and res_ligne[0].is_a? String)
end
QCM.save_question #{=title}
[#def}

### NOT FINISHED!!!
## {#qcmChoicesList]prj/title/key[#content]...[#}
## or {#qcmChoicesList]prj/title/key1+key2+key3[#content]...[#}

{#def]qcmChoicesList[#,]title[][#,]content[]
[#>]txt[]
[#rb<]prj,title,keys=#{=title}.strip.split("/").map{|e| e.strip}
keys=keys.split("+")
content=#{=content}.split(/---+\n/).map{|e| e.strip}
##p content
keys=(1..content.length).map{|e| keys[0]+e.to_s} if keys.length != content.length and keys.length==1
##p keys
content.each_with_index do |b,i| #
  k=keys[i]
  ##p [:key,k,b]
  {#<][#+]txt[{#qcmChoices]:{prj}/:{title}/:{k.to_s}[#choices]:{b}[#qcmChoices}\\][#<}
end
##p [:txt,#{=txt}]##
[#>]
[{#qcmFramed]#{txt}[#qcmFramed}]
[#def}

{#def]qcmFramed[#,]content[][#>]
\begin{framed}
\noindent \textbf{RÃ©ponses aux choix (pour remplir le Formulaire de REPONSES)}~:\\
#{content}
\end{framed}
[#def}

#####################################
#### QCM File: new, free, save load
#####################################

{#def]qcmLoadQuestion[#,]title[]
[#rb<]QCM.set_question #{=title}
bareme=QCM.question_bareme || "mz=1"
QCM.read_project
[#rb>]
if (question=QCM.question)
  if question[0].is_a? String
    txt=question[0]
    {#>]:{txt} [#>}
    question=question[1..-1]
  end
  {#>][\begin{questionmult}{q:{title}-:{key}}\bareme{:{bareme}}\begin{reponsesperso}[o]][#>}
  question.each do |a| #
    choice="\\" + (a[:answer] == :good ? "bonne" : "mauvaise")
    {#>]:{choice}{:{a[:label]}\quad}[#>}
  end
  {#>][\end{reponsesperso}\end{questionmult}][#>}
end
[#def}

{#def]qcmLoadQuestions[#,]title[]
[#rb<]QCM.set_questions #{=title}
#p #{=title}
QCM.read_project
[#rb>]
if (questions=QCM.questions)
  questions.keys.each do |key| #
    {#>]\noindent {#qcmLoadQuestion]#{title}/:{key}[#}\\[#>}
  end
end
[#def}

{#def]qcmBareme[#,]content[][#rb<]
lignes=#{=content}.strip.split("\n").map{|e| e.strip}
lignes.each do |ligne| #
  elts=ligne.split(" | ")
  prj,title=nil,nil #to save the values in the following loop
  elts.each_with_index do |e,i| #
    path,*bareme=e.split(":")
    bareme=bareme.join(":").strip
    if i==0
      prj,title,key=path.strip.split("/")
    else
      key=path.strip
    end
    QCM.set_question_bareme(prj,title,key,bareme)
  end
end
[#def}
